import prman

ri = prman.Ri()

filename = "theProject.rib"
ri.Begin(filename)

ri.Display("theProject", "it", "rgb")
ri.Format(720,512,1)
ri.Projection("perspective", {"fov":[45]})
ri.Integrator('PxrPathTracer', 'Integrator')
ri.DepthOfField(36,0.1,3)

#SubdivisionMeshes in this code are based on:
#https://renderman.pixar.com/resources/RenderMan_20/appnote.28.html

def TestSphere(sizeF) :
	r = sizeF/2
	ri.SubdivisionMesh("catmull-clark",
	[4,4,4,4,4,4],[0,2,3,1,4,6,7,5,5,1,3,4,2,0,7,6,6,4,3,2,1,5,7,0],
	["crease","crease"],[5,1,5,1],[5,1,3,4,5,2,0,7,6,2],[0,0],
	{"P":[r,-r,-r,r,r,-r,r,-r,r,r,r,r,-r,r,r,-r,r,-r,-r,-r,r,-r,-r,-r]})
	
def TestCube(width,height,depth) :
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.SubdivisionMesh("catmull-clark",
	[4,4,4,4,4,4],[0,2,3,1,4,6,7,5,5,1,3,4,2,0,7,6,6,4,3,2,1,5,7,0],
	["crease","crease","crease","crease","crease","crease"],
	[5,1,5,1,5,1,5,1,5,1,5,1],
	[0,2,3,1,0,4,6,7,5,4,5,1,3,4,5,2,0,7,6,2,6,4,3,2,6,1,5,7,0,1],
	[9.9,9.9,9.9,9.9,9.9,9.9],
	{"P":[w,-h,-d,w,h,-d,w,-h,d,w,h,d,-w,h,d,-w,h,-d,-w,-h,d,-w,-h,-d]})

def TestCyl(diam,height) :
	r=diam/2.0
	h=height*1.0
	ri.SubdivisionMesh("catmull-clark",
	[4,4,4,4,4,4],[0,2,3,1,4,6,7,5,5,1,3,4,2,0,7,6,6,4,3,2,1,5,7,0],
	["crease","crease"],[5,1,5,1],[5,1,3,4,5,2,0,7,6,2],[10,10],
	{"P":[r,-h,-r,r,h,-r,r,-h,r,r,h,r,-r,h,r,-r,h,-r,-r,-h,r,-r,-h,-r]})

def MemoryStickModel2(posX, posY, posZ, rotX, rotY, rotZ, sc) :
	ri.TransformBegin()
	ri.Rotate(rotX,1,0,0)
	ri.Rotate(rotY,0,1,0)
	ri.Rotate(rotZ,0,0,1)
	ri.Translate(posX,posY,posZ)
	ri.Scale(sc,sc,sc)
	ri.TransformBegin()

	#ri.SolidBegin("difference")

	ri.SolidBegin("difference")

	ri.SolidBegin("union")

	ri.SolidBegin("primitive")
	TestCube(1,0.4,3)
	ri.SolidEnd()

	ri.SolidBegin("primitive")
	ri.TransformBegin()
	ri.Translate(0,0,1.5)
	TestCyl(1.08,0.2)
	ri.TransformEnd()
	ri.SolidEnd()

	ri.SolidEnd()

	ri.SolidBegin("primitive")
	ri.TransformBegin()
	ri.Translate(0,0,1.5)
	TestCyl(0.8,5)
	ri.TransformEnd()
	ri.SolidEnd()

	#ri.TransformBegin()
	#ri.SolidBegin("primitive")
	#ri.Translate(0,24.5,3)
	#TestSphere(50)
	#ri.SolidEnd()
	#ri.TransformEnd()

	#ri.SolidEnd()

	ri.SolidEnd()

	ri.TransformEnd()
	ri.TransformEnd()
#endModel

def Cube(width, height, depth) :
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	#ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#rear
	face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]
	ri.Patch("bilinear",{'P':face})
	#front
	face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]
	ri.Patch("bilinear",{'P':face})
	#left
	face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]
	ri.Patch("bilinear",{'P':face})
	#right
	face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]
	ri.Patch("bilinear",{'P':face})
	#bottom
	face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]
	ri.Patch("bilinear",{'P':face})
	#top
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]
	ri.Patch("bilinear",{'P':face})

def Cylinder(dia,height) :
	r=dia*2
	h=height/2
	ri.TransformBegin()
	ri.SolidBegin("intersection")

	ri.SolidBegin("primitive")
	Cube(r,height,r)
	ri.SolidEnd()

	ri.SolidBegin("primitive")
	ri.TransformBegin()
	ri.Rotate(90,1,0,0)
	ri.Cylinder(dia,-h,h,360)
	ri.TransformEnd()
	ri.SolidEnd()

	ri.SolidEnd()
	ri.TransformEnd()

def MemoryStickModel(posX, posY, posZ, rotX, rotY, rotZ, sc) :
	ri.TransformBegin()
	ri.Rotate(rotX,1,0,0)
	ri.Rotate(rotY,0,1,0)
	ri.Rotate(rotZ,0,0,1)
	ri.Translate(posX,posY,posZ)
	ri.Scale(sc,sc,sc)
	ri.TransformBegin()

	#ri.SolidBegin("difference")

	#ri.SolidBegin("difference")

	ri.SolidBegin("union")

	ri.SolidBegin("primitive")
	Cube(1,0.4,3)
	ri.SolidEnd()

	ri.SolidBegin("primitive")
	ri.TransformBegin()
	ri.Translate(0,0,1.5)
	ri.Rotate(90,1,0,0)
	Cylinder(0.5,0.4)
	ri.TransformEnd()
	ri.SolidEnd()

	ri.SolidEnd()

	#ri.SolidBegin("primitive")
	#ri.TransformBegin()
	#ri.Translate(0,0,1.5)
	#ri.Rotate(90,1,0,0)
	#ri.Cylinder(0.3,-1,1,360)
	#ri.TransformEnd()
	#ri.SolidEnd()

	#ri.TransformBegin()
	#ri.SolidBegin("primitive")
	#ri.Translate(0,24.5,3)
	#TestSphere(50)
	#ri.SolidEnd()
	#ri.TransformEnd()

	#ri.SolidEnd()

	#ri.SolidEnd()

	ri.TransformEnd()
	ri.TransformEnd()

def Table(posX, posY, posZ, rotX, rotY, rotZ, sc) :
    ri.Bxdf("PxrDisney", "table",
    {		
            "color baseColor":[0,0,0],
            "float metallic":[1],
            "float specular":[1],
            "float anisotropic":[0.5],
            "float clearcoat":[0.95]
    }
    )
    ri.TransformBegin()
    ri.Translate(posX,posY,posZ)
    ri.Rotate(rotX,1,0,0)
    ri.Rotate(rotY,0,1,0)
    ri.Rotate(rotZ,0,0,1)
    ri.Scale(sc,sc,sc)
    ri.Patch("bilinear",{"P":[5,0,-5,5,0,5,-5,0,-5,-5,0,5]})
    ri.TransformEnd()
#endTable

ri.WorldBegin()
#All the geometry goes here vvv

ri.Translate(0,0,5.75)
ri.AttributeBegin()
ri.Rotate(90,1,0,0)
ri.Light("PxrDomeLight", "holyLight",
{
"float exposure":[0],
"string lightColorMap":["hdrTest.tx"]
}
)
ri.AttributeEnd()

ri.Rotate(-45,1,0,0)

#MemoryStickModel(0,0,0,-90,0,180,1)
Cylinder(1,2)

Table(0,-1.19,0,0,0,0,3)

#All the geometry goes here ^^^
ri.WorldEnd()
ri.End()